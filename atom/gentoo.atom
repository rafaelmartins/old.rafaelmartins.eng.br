<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Rafael Martins Â» gentoo</title>
  <id>/atom/gentoo.atom</id>
  <updated>2014-08-09T21:46:25Z</updated>
  <link href="http://old.rafaelmartins.eng.br/" />
  <link href="http://old.rafaelmartins.eng.br/atom/gentoo.atom" rel="self" />
  <author>
    <name>Rafael G. Martins</name>
  </author>
  <subtitle type="text">Gentoo Linux, Engineering and random stuff.</subtitle>
  <generator>blohg</generator>
  <entry>
    <title type="text">Introducing pyoembed</title>
    <id>/post/introducing-pyoembed/</id>
    <updated>2014-08-09T21:46:25Z</updated>
    <published>2014-08-09T21:46:25Z</published>
    <link href="http://old.rafaelmartins.eng.br/post/introducing-pyoembed/" />
    <author>
      <name>Rafael G. Martins</name>
      <email>rafael@rafaelmartins.eng.br</email>
    </author>
    <summary type="html">&lt;!-- tags: en-us, pyoembed, oembed, python, gentoo --&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;strong&gt;Warning&lt;/strong&gt;: This is a (very) delayed announcement! ;-)&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; is an open standard for embedded content. It allows users to embed some
resource, like a picture or a video, in a web page using only the resource URL,
without knowing the details of how to embed the resource in a web page.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; isn't new stuff. It was created around 2008, and despite not being
widely supported by content providers, it is supported by some big players,
like YouTube, Vimeo, Flickr and Instagram, making its usage highly viable.&lt;/p&gt;
&lt;p&gt;To support the &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; standard, the content provider just needs to provide a
simple API endpoint, that receives an URL and a few other parameters, like the
maximum allowed height/width, and returns a JSON or XML object, with ready-to-use
embeddable code.&lt;/p&gt;
&lt;p&gt;The content provider API endpoint can be previously known by the oEmbed client,
or auto-discovered using some meta tags added to the resource's HTML page. This is
the point where the standard isn't precise enough: not all of the providers support
auto-discovering of the API endpoint, neither all of the providers are properly
listed on the &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; specification. Proper &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; clients should try both
approaches, looking for known providers first, falling back to auto-discovered
endpoints, if possible.&lt;/p&gt;
&lt;p&gt;Each of the &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/python-oembed/&quot;&gt;Python&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://pyembed.github.io/&quot;&gt;libraries&lt;/a&gt; for &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; decided to follow one of the mentioned
approaches, without caring about the other one, failing to support relevant
providers. And this is the reason why I decided to start writing pyoembed!&lt;/p&gt;
</summary>
    <content type="html">&lt;!-- tags: en-us, pyoembed, oembed, python, gentoo --&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;strong&gt;Warning&lt;/strong&gt;: This is a (very) delayed announcement! ;-)&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; is an open standard for embedded content. It allows users to embed some
resource, like a picture or a video, in a web page using only the resource URL,
without knowing the details of how to embed the resource in a web page.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; isn't new stuff. It was created around 2008, and despite not being
widely supported by content providers, it is supported by some big players,
like YouTube, Vimeo, Flickr and Instagram, making its usage highly viable.&lt;/p&gt;
&lt;p&gt;To support the &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; standard, the content provider just needs to provide a
simple API endpoint, that receives an URL and a few other parameters, like the
maximum allowed height/width, and returns a JSON or XML object, with ready-to-use
embeddable code.&lt;/p&gt;
&lt;p&gt;The content provider API endpoint can be previously known by the oEmbed client,
or auto-discovered using some meta tags added to the resource's HTML page. This is
the point where the standard isn't precise enough: not all of the providers support
auto-discovering of the API endpoint, neither all of the providers are properly
listed on the &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; specification. Proper &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; clients should try both
approaches, looking for known providers first, falling back to auto-discovered
endpoints, if possible.&lt;/p&gt;
&lt;p&gt;Each of the &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/python-oembed/&quot;&gt;Python&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;http://pyembed.github.io/&quot;&gt;libraries&lt;/a&gt; for &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; decided to follow one of the mentioned
approaches, without caring about the other one, failing to support relevant
providers. And this is the reason why I decided to start writing pyoembed!&lt;/p&gt;
&lt;!-- read_more --&gt;
&lt;p&gt;pyoembed is a simple and easy to use implementation of the &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; standard for
Python, that supports both auto-discovered and explicitly defined providers,
supporting most (if not all) the relevant providers.&lt;/p&gt;
&lt;p&gt;pyoembed's architecture makes it easy to add new providers and supports most of
the existing providers out of the box.&lt;/p&gt;
&lt;p&gt;To install it, just type:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ pip install pyoembed
&lt;/pre&gt;
&lt;p&gt;Gentoo users can install it from &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;gentoo-x86&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
# emerge -av pyoembed
&lt;/pre&gt;
&lt;p&gt;pyoembed is developed and managed using Github, the repository is publicly
available:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rafaelmartins/pyoembed&quot;&gt;https://github.com/rafaelmartins/pyoembed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A Jenkins instance runs the unit tests and the integration tests automatically,
you can check the results here:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://ci.rgm.io/view/pyoembed/&quot;&gt;https://ci.rgm.io/view/pyoembed/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The integration tests are supposed to fail from time to time, because they rely
on external urls, that may be unavailable while the tests are running.&lt;/p&gt;
&lt;p&gt;pyoembed is released under a 3 clause BSD license.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="text">Gentoo: News for PIC developers</title>
    <id>/post/gentoo-news-for-pic-devs/</id>
    <updated>2013-12-26T03:31:54Z</updated>
    <published>2013-12-26T03:31:54Z</published>
    <link href="http://old.rafaelmartins.eng.br/post/gentoo-news-for-pic-devs/" />
    <author>
      <name>Rafael G. Martins</name>
      <email>rafael@rafaelmartins.eng.br</email>
    </author>
    <summary type="html">&lt;!-- tags: en-us,gentoo,electronics,pic --&gt;
&lt;p&gt;Some weeks ago I decided to restart working with PIC microcontrollers, just for fun,
and bought some electronic components, tools, etc. After having everything in hands,
I started looking at the state of the PIC development tools in Gentoo, and found some
outdated packages. I updated the packages I wanted to use (&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/gputils&lt;/span&gt;&lt;/tt&gt;
and &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/gpsim&lt;/span&gt;&lt;/tt&gt;; &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/sdcc&lt;/span&gt;&lt;/tt&gt; still needs some work), and added
some other packages (&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/cpik&lt;/span&gt;&lt;/tt&gt;, a C compiler for PIC 18F, and re-added
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/pikdev&lt;/span&gt;&lt;/tt&gt;, a simple graphic IDE for the development of PIC-based
applications, that was previously removed due to the usage of kdelibs3, and now is a
Qt4-only application).&lt;/p&gt;
&lt;p&gt;I'll be putting some effort on packaging the MPLAB X IDE and the XC8 compiler in the
next weeks, if permitted by their licenses. I'm not sure yet.&lt;/p&gt;
&lt;p&gt;That's all for now.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;
</summary>
    <content type="html">&lt;!-- tags: en-us,gentoo,electronics,pic --&gt;
&lt;p&gt;Some weeks ago I decided to restart working with PIC microcontrollers, just for fun,
and bought some electronic components, tools, etc. After having everything in hands,
I started looking at the state of the PIC development tools in Gentoo, and found some
outdated packages. I updated the packages I wanted to use (&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/gputils&lt;/span&gt;&lt;/tt&gt;
and &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/gpsim&lt;/span&gt;&lt;/tt&gt;; &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/sdcc&lt;/span&gt;&lt;/tt&gt; still needs some work), and added
some other packages (&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/cpik&lt;/span&gt;&lt;/tt&gt;, a C compiler for PIC 18F, and re-added
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dev-embedded/pikdev&lt;/span&gt;&lt;/tt&gt;, a simple graphic IDE for the development of PIC-based
applications, that was previously removed due to the usage of kdelibs3, and now is a
Qt4-only application).&lt;/p&gt;
&lt;p&gt;I'll be putting some effort on packaging the MPLAB X IDE and the XC8 compiler in the
next weeks, if permitted by their licenses. I'm not sure yet.&lt;/p&gt;
&lt;p&gt;That's all for now.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="text">GSoC and Scrum</title>
    <id>/post/gsoc-and-scrum/</id>
    <updated>2013-11-01T04:34:52Z</updated>
    <published>2013-11-01T04:34:52Z</published>
    <link href="http://old.rafaelmartins.eng.br/post/gsoc-and-scrum/" />
    <author>
      <name>Rafael G. Martins</name>
      <email>rafael@rafaelmartins.eng.br</email>
    </author>
    <summary type="html">&lt;!-- tags: en-us,gentoo,gsoc --&gt;
&lt;p&gt;This year I helped the &lt;a class=&quot;reference external&quot; href=&quot;http://wiki.gentoo.org/wiki/Google_Summer_of_Code/2013&quot;&gt;Gentoo GSoC&lt;/a&gt; project as a mentor for the first time! I
mentored Jauhien Piatlicki, that worked on the g-sorcery project, that is a
framework for automated ebuild generators. It is meant to replace g-octave
and some of the other Gentoo automated ebuild generators in the future.&lt;/p&gt;
&lt;p&gt;For those who don't know, &lt;a class=&quot;reference external&quot; href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2013&quot;&gt;Google Summer of Code&lt;/a&gt; is a Google program that
pays a student to work during 3 months on an open source project.&lt;/p&gt;
&lt;p&gt;I have been using Scrum at work for some time already, and asked Jauhien about
trying to use it in our project. We agreed on using it wherever it made sense
for our workflow. In other words, we adapted Scrum to our workflow, instead of
adapt our workflow to Scrum. That's because none of us was a Scrum expert, and
because we needed to follow Gentoo/Google guidelines and timeline during all
the project, making it hard to apply some aspects of the Scrum methodologies.&lt;/p&gt;
&lt;p&gt;We had sprints of 2 weeks, starting on monday, after a quick planning on IRC.
We had a private IRC channel at Freenode, where we discussed stuff, had
meetings, etc.&lt;/p&gt;
</summary>
    <content type="html">&lt;!-- tags: en-us,gentoo,gsoc --&gt;
&lt;p&gt;This year I helped the &lt;a class=&quot;reference external&quot; href=&quot;http://wiki.gentoo.org/wiki/Google_Summer_of_Code/2013&quot;&gt;Gentoo GSoC&lt;/a&gt; project as a mentor for the first time! I
mentored Jauhien Piatlicki, that worked on the g-sorcery project, that is a
framework for automated ebuild generators. It is meant to replace g-octave
and some of the other Gentoo automated ebuild generators in the future.&lt;/p&gt;
&lt;p&gt;For those who don't know, &lt;a class=&quot;reference external&quot; href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2013&quot;&gt;Google Summer of Code&lt;/a&gt; is a Google program that
pays a student to work during 3 months on an open source project.&lt;/p&gt;
&lt;p&gt;I have been using Scrum at work for some time already, and asked Jauhien about
trying to use it in our project. We agreed on using it wherever it made sense
for our workflow. In other words, we adapted Scrum to our workflow, instead of
adapt our workflow to Scrum. That's because none of us was a Scrum expert, and
because we needed to follow Gentoo/Google guidelines and timeline during all
the project, making it hard to apply some aspects of the Scrum methodologies.&lt;/p&gt;
&lt;p&gt;We had sprints of 2 weeks, starting on monday, after a quick planning on IRC.
We had a private IRC channel at Freenode, where we discussed stuff, had
meetings, etc.&lt;/p&gt;
&lt;!-- read_more --&gt;
&lt;p&gt;We didn't had daily meetings. We were on very different timezones, and it was
quite hard to meet daily. We just used the other tools and our IRC channel to
fill the gap left by the daily meetings.&lt;/p&gt;
&lt;p&gt;We created a kanban board, using &lt;a class=&quot;reference external&quot; href=&quot;http://trello.com/&quot;&gt;Trello&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://trello.com/b/8WdY2ZIs/framework-for-automated-ebuild-generators&quot;&gt;https://trello.com/b/8WdY2ZIs/framework-for-automated-ebuild-generators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This board and the IRC channel were our main management tools, and both worked
pretty well. The board cards were used for stories and the card checklists were
used for the tasks.&lt;/p&gt;
&lt;p&gt;During the first planning meeting we estimated all the backlog, to know how
many points were required per sprint to keep the project on schedule, because we
had a hard timeline to accomplish. These estimatives were quite useful, because
everybody following the project was able to know if the work was evolving
properly or not. But estimating the backlog, to accomplish a timeline, isn't an
easy task, it requires good knowledge of the stories and about how everything
will be implemented.&lt;/p&gt;
&lt;p&gt;During the other planning meetings we just calculated how many points were
done in the previous sprint and choose stories for the next sprint, replacing the
stories already finished. I let Jauhien choose the stories he wanted to include
in the sprints.&lt;/p&gt;
&lt;p&gt;Our methodology was proven efficient right before the GSoC mid-term evaluation.
All the stories planned to be finished before the evaluation were done, showing
that the work was evolving like planned and that our estimatives were good enough.
We were already confident on this, because all the sprints before the evaluation
were finished in time. :)&lt;/p&gt;
&lt;p&gt;Same thing before the final evaluation. All the required stories were finished!&lt;/p&gt;
&lt;p&gt;We both had several problems during the project, but the tools made it easy to track
the current state of the project easily by looking at the kanban board, at the
source repository or just asking on IRC. Knowing the status of the project allowed
us to focus the efforts on getting the tasks done, while still handling our personal
problems in parallel.&lt;/p&gt;
&lt;p&gt;This post isn't intended to be a Scrum tutorial or something like that. I just
wanted to share the experience of using these methodologies during a GSoC project.
We just adapted Scrum to our workflow, as said before. Don't be too picky! :)&lt;/p&gt;
&lt;p&gt;If you are interested on the g-sorcery project, you can find more information here:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jauhien/g-sorcery&quot;&gt;https://github.com/jauhien/g-sorcery&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="text">Creating a tumblelog with blohg</title>
    <id>/post/creating-a-tumblelog-with-blohg/</id>
    <updated>2012-12-21T05:39:19Z</updated>
    <published>2012-12-21T05:39:19Z</published>
    <link href="http://old.rafaelmartins.eng.br/post/creating-a-tumblelog-with-blohg/" />
    <author>
      <name>Rafael G. Martins</name>
      <email>rafael@rafaelmartins.eng.br</email>
    </author>
    <summary type="html">&lt;!-- tags: en-us,blohg,gentoo --&gt;
&lt;p&gt;Tumblelogs are &lt;a class=&quot;reference external&quot; href=&quot;http://www.kottke.org/05/10/tumblelogs&quot;&gt;old stuff&lt;/a&gt;, but
services like &lt;a class=&quot;reference external&quot; href=&quot;http://tumblr.com/&quot;&gt;Tumblr&lt;/a&gt; popularized them a lot recently.
Thumblelogs are a quick and simple way to share random content with readers.
They can be used to share a link, a photo, a video, a quote, a chat log, etc.&lt;/p&gt;
&lt;p&gt;blohg is a good blogging engine, we know, but what about tumblelogs?!&lt;/p&gt;
&lt;p&gt;You can already share videos from Youtube and Vimeo, and can share most of the
other stuff manually, but it is boring, and diverges from the main objective of
the tumblelogs: simplicity.&lt;/p&gt;
</summary>
    <content type="html">&lt;!-- tags: en-us,blohg,gentoo --&gt;
&lt;p&gt;Tumblelogs are &lt;a class=&quot;reference external&quot; href=&quot;http://www.kottke.org/05/10/tumblelogs&quot;&gt;old stuff&lt;/a&gt;, but
services like &lt;a class=&quot;reference external&quot; href=&quot;http://tumblr.com/&quot;&gt;Tumblr&lt;/a&gt; popularized them a lot recently.
Thumblelogs are a quick and simple way to share random content with readers.
They can be used to share a link, a photo, a video, a quote, a chat log, etc.&lt;/p&gt;
&lt;p&gt;blohg is a good blogging engine, we know, but what about tumblelogs?!&lt;/p&gt;
&lt;p&gt;You can already share videos from Youtube and Vimeo, and can share most of the
other stuff manually, but it is boring, and diverges from the main objective of
the tumblelogs: simplicity.&lt;/p&gt;
&lt;!-- read_more --&gt;
&lt;p&gt;To solve this issue, I developed a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rafaelmartins/rafael.martins.im/blob/master/ext/blohg_tumblelog.py&quot;&gt;blohg extension&lt;/a&gt;
(Yeah, blohg-1.0 supports extensions! &lt;tt class=&quot;docutils literal&quot;&gt;\o/&lt;/tt&gt; ) that adds some cool
reStructuredText directives:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;link&quot;&gt;
&lt;h4&gt;link&lt;/h4&gt;
&lt;p&gt;This directive is used to share links. It will embed the content of the link to
the post automatically, if the provided link is from a service that supports
the &lt;a class=&quot;reference external&quot; href=&quot;http://oembed.com/&quot;&gt;oEmbed&lt;/a&gt; protocol. If it isn't, and the link is from
a HTML page, it will include the link with the title of the page to the post.
Otherwise it will just include the raw link to the post.&lt;/p&gt;
&lt;p&gt;Usage example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; http://www.youtube.com/watch?v=gp30v6XMxBg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;quote&quot;&gt;
&lt;h4&gt;quote&lt;/h4&gt;
&lt;p&gt;This directive is used to share quotes. It will create a &lt;tt class=&quot;docutils literal&quot;&gt;blockquote&lt;/tt&gt; element
with the quote and add a signature with the author name, if provided.&lt;/p&gt;
&lt;p&gt;Usage example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;:author:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Myself&lt;/span&gt;

   This is a random quote!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;chat&quot;&gt;
&lt;h4&gt;chat&lt;/h4&gt;
&lt;p&gt;This directive is used to share chat logs. It will add a div with the chat log,
highlighted with &lt;a class=&quot;reference external&quot; href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;

   [00:56:38] &amp;lt;rafaelmartins&amp;gt; I&amp;#39;m crazy.
   [00:56:48] &amp;lt;rafaelmartins&amp;gt; I chat alone.
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;You can see the directives in action on my shiny new tumblelog:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://rafael.martins.im/&quot;&gt;http://rafael.martins.im/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The source code of the tumblelog, including the blohg extension and the
mobile-friendly templates, is available here:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rafaelmartins/rafael.martins.im&quot;&gt;https://github.com/rafaelmartins/rafael.martins.im&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have no plans to release this extension as part of blohg, but feel free to
use it if you find it useful!&lt;/p&gt;
&lt;p&gt;That's all!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
